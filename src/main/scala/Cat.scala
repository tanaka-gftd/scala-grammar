/* クラスについての学習 */


/*
  //Scalaにおけるクラスの定義
  class クラス名(コンストラクタ引数1: コンストラクタ引数1の型, コンストラクタ引数2: コンストラクタ引数2の型, ...) {
    0個以上のフィールドの定義またはメソッド定義
  }

  コンストラクタ...new というキーワードと共に呼び出される、インスタンスを作成するメソッドのようなもの
  フィールド...クラスが保持する状態
  メソッド...クラスの持つ振る舞い(関数)
  メンバー...クラスの持つフィールドやメソッドの総称、個々のメンバーはクラス外に公開できるorできないを設定できる
  カプセル化...外部に公開するメンバーを制限して内部の情報を隠蔽すること
*/


/*
  コンストラクタ引数で与えた名前の文字列を nameフィールド として保持し、
  greet というメソッドを呼び出すと、自分の名前が含まれた挨拶を返す、Catクラスを定義

  コンストラクタ引数にvarやvalを付けると、インスタンス作成後に、そのフィールドにアクセスできる(フィールドが公開される)
  下記の場合だと、インスタンス.name でnameフィールドの中身を表示させることができる。
  逆に、コンストラクタ引数にvarやvalを付けない場合は、インスタンス.name してもnameフィールドの中身は見えない(カプセル化)

  メソッドにprivateを付けると、外部からは実行できなくなる(カプセル化)

  カプセル化すると、外部からアクセスできない → つまり、外部に影響を与えない
*/
class Cat(name: String) {
  private def greet(): Unit = println(s"僕、${name}")
}
