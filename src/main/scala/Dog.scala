/* クラスを継承したオブジェクト */


/*
  オブジェクトは型としての性質も持つので、
  クラスのインスタンス化の代わりとして、オブジェクトを使うこともできる。
  ↓
  Scalaでは、クラスのインスタンス化という方法だけでなく、
  objectキーワードを使うことでもクラスのオブジェクトを作成できる
*/


//まずは、Dogクラスを定義
class Dog (name: String){
  def greet(): Unit = println(s"${name}だワン")
}


//上記のDogクラスを継承したobject
//以下のobjectはDogクラスを継承しているので、Dog型のオブジェクトと言える
object Taro extends Dog("タロウ")


/*
  objectは「ファクトリメソッド」というメソッドを作るのにも用いられる。(ファクトリメソッド...クラスのインスタンスを生成するメソッド)
  Scalaのオブジェクトの中で、applyというメソッドを定義すると、そのメソッドは特別扱いされ、
  オブジェクト名(applyメソッドの引数) という形式で呼び出すことが可能になる。
  それを行うためには、まずクラスと同じ名前のobjectを用意し、そこにファクトリメソッドとしてapplyメソッドを用意する。
  ファクトリメソッドを使うと、newを使わずにインスタンスを生成できる。

  例として以下の実装だと、
  val pochi = Dog("ポチ") や
  val jiro = Dog.apply("ジロウ") で、Dogクラスのインスタンスを生成できる

  また、本来のコンストラクタとは違う引数の型である数値などでクラスのインスタンスを作りたい場合にも、このファクトリメソッドは役に立つ。
  以下の実装だと、引数が文字列か数値かで処理が切り替わり、
  例えば、val iron = Dog(18) とすると、Dogクラスのコンストラクタの引数として 番号付き犬18番 が渡される。
  (私見：オーバーロード？)
*/
object Dog {
  def apply(name: String) = new Dog(name)  //Dog()に引数として文字列を渡すと、こちらが実行
  def apply(id: Int) = new Dog(s"${id}番の犬です！")  //Dog()に引数として数値を渡すと、こちらが実行
}



/*
  ファクトリメソッド実装などで使用する、クラスと同名のオブジェクトを、「コンパニオンオブジェクト」と呼ぶ。
  （上記で実装したDogクラスに対する、Dogオブジェクトがコンパニオンオブジェクトに該当）

  コンパニオンオブジェクトの便利な点：
    同名のクラスのprivateなコンストラクタ引数の値(=フィールドとして保持される値、つまりインスタンス変数として保持される値)にアクセス可能である点。
    そのため、コンパニオンオブジェクトには、外部のクラスよりも、よりクラスに結合した処理を記述できる。
    試しに、以下でFoxクラスとFoxオブジェクトを作り、プライベートなコンストラクタ引数の値(nameフィールド)にアクセスしてみる。
    以下の実装だと、Fox.printName(Foxクラスのインスタンス名) で、privateなnameフィールド(privateなインスタンス変数)にアクセスできる
*/
class Fox (private val name: String) {
  def greet(): Unit = println(s"${name}だコン")
}

object Fox {
  def apply(name: String) = new Fox(name)
  def apply(id: Int) = new Fox(s"No.${id}のキツネです！")

  //Fox.printName(Foxクラスのインスタンス名) で、privateなnameフィールド(privateなインスタンス変数)にアクセスできる
  def printName(fox: Fox): Unit = println(fox.name)
}

/*
  コンストラクタに渡した引数の公開範囲：
    何も付けない...外部には一切公開されない、なので外部には影響も与えない(カプセル化)
    var,valを付ける...公開される。インスタンスからアクセスできる。(varなら変更可能なフィールドの初期値、valなら変更不可なフィールドとして保持される)
    private var や private val を付ける...同名のオブジェクト(コンパニオンオブジェクト)からのみアクセスできる
*/